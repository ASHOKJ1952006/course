{"ast":null,"code":"var _jsxFileName = \"D:\\\\course\\\\frontend\\\\src\\\\contexts\\\\ThemeContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThemeContext = /*#__PURE__*/createContext();\nexport const useTheme = () => {\n  _s();\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n};\n_s(useTheme, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const ThemeProvider = ({\n  children\n}) => {\n  _s2();\n  const [isDarkMode, setIsDarkMode] = useState(() => {\n    // Check localStorage for saved theme preference\n    const savedTheme = localStorage.getItem('theme');\n    if (savedTheme) {\n      return savedTheme === 'dark';\n    }\n    // Check system preference if no saved preference\n    return window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;\n  });\n  useEffect(() => {\n    // Save theme preference to localStorage\n    localStorage.setItem('theme', isDarkMode ? 'dark' : 'light');\n\n    // Apply theme class to document root\n    if (isDarkMode) {\n      document.documentElement.classList.add('dark-theme');\n      document.documentElement.classList.remove('light-theme');\n    } else {\n      document.documentElement.classList.add('light-theme');\n      document.documentElement.classList.remove('dark-theme');\n    }\n  }, [isDarkMode]);\n  useEffect(() => {\n    // Listen for system theme changes\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    const handleChange = e => {\n      // Only auto-switch if user hasn't manually set a preference\n      const savedTheme = localStorage.getItem('theme');\n      if (!savedTheme) {\n        setIsDarkMode(e.matches);\n      }\n    };\n    mediaQuery.addEventListener('change', handleChange);\n    return () => mediaQuery.removeEventListener('change', handleChange);\n  }, []);\n  const toggleTheme = () => {\n    setIsDarkMode(prevMode => !prevMode);\n  };\n  const value = {\n    isDarkMode,\n    toggleTheme,\n    theme: isDarkMode ? 'dark' : 'light'\n  };\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n_s2(ThemeProvider, \"diNo29H+1fIC9+CZISrd3WIuZII=\");\n_c = ThemeProvider;\nexport default ThemeContext;\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","ThemeContext","useTheme","_s","context","Error","ThemeProvider","children","_s2","isDarkMode","setIsDarkMode","savedTheme","localStorage","getItem","window","matchMedia","matches","setItem","document","documentElement","classList","add","remove","mediaQuery","handleChange","e","addEventListener","removeEventListener","toggleTheme","prevMode","value","theme","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/course/frontend/src/contexts/ThemeContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\n\nconst ThemeContext = createContext();\n\nexport const useTheme = () => {\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n};\n\nexport const ThemeProvider = ({ children }) => {\n  const [isDarkMode, setIsDarkMode] = useState(() => {\n    // Check localStorage for saved theme preference\n    const savedTheme = localStorage.getItem('theme');\n    if (savedTheme) {\n      return savedTheme === 'dark';\n    }\n    // Check system preference if no saved preference\n    return window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;\n  });\n\n  useEffect(() => {\n    // Save theme preference to localStorage\n    localStorage.setItem('theme', isDarkMode ? 'dark' : 'light');\n\n    // Apply theme class to document root\n    if (isDarkMode) {\n      document.documentElement.classList.add('dark-theme');\n      document.documentElement.classList.remove('light-theme');\n    } else {\n      document.documentElement.classList.add('light-theme');\n      document.documentElement.classList.remove('dark-theme');\n    }\n  }, [isDarkMode]);\n\n  useEffect(() => {\n    // Listen for system theme changes\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    const handleChange = (e) => {\n      // Only auto-switch if user hasn't manually set a preference\n      const savedTheme = localStorage.getItem('theme');\n      if (!savedTheme) {\n        setIsDarkMode(e.matches);\n      }\n    };\n\n    mediaQuery.addEventListener('change', handleChange);\n    return () => mediaQuery.removeEventListener('change', handleChange);\n  }, []);\n\n  const toggleTheme = () => {\n    setIsDarkMode(prevMode => !prevMode);\n  };\n\n  const value = {\n    isDarkMode,\n    toggleTheme,\n    theme: isDarkMode ? 'dark' : 'light'\n  };\n\n  return (\n    <ThemeContext.Provider value={value}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n\nexport default ThemeContext;"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9E,MAAMC,YAAY,gBAAGN,aAAa,CAAC,CAAC;AAEpC,OAAO,MAAMO,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAMC,OAAO,GAAGR,UAAU,CAACK,YAAY,CAAC;EACxC,IAAI,CAACG,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,8CAA8C,CAAC;EACjE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,EAAA,CANWD,QAAQ;AAQrB,OAAO,MAAMI,aAAa,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC7C,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGb,QAAQ,CAAC,MAAM;IACjD;IACA,MAAMc,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAChD,IAAIF,UAAU,EAAE;MACd,OAAOA,UAAU,KAAK,MAAM;IAC9B;IACA;IACA,OAAOG,MAAM,CAACC,UAAU,IAAID,MAAM,CAACC,UAAU,CAAC,8BAA8B,CAAC,CAACC,OAAO;EACvF,CAAC,CAAC;EAEFlB,SAAS,CAAC,MAAM;IACd;IACAc,YAAY,CAACK,OAAO,CAAC,OAAO,EAAER,UAAU,GAAG,MAAM,GAAG,OAAO,CAAC;;IAE5D;IACA,IAAIA,UAAU,EAAE;MACdS,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACC,GAAG,CAAC,YAAY,CAAC;MACpDH,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACE,MAAM,CAAC,aAAa,CAAC;IAC1D,CAAC,MAAM;MACLJ,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACC,GAAG,CAAC,aAAa,CAAC;MACrDH,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACE,MAAM,CAAC,YAAY,CAAC;IACzD;EACF,CAAC,EAAE,CAACb,UAAU,CAAC,CAAC;EAEhBX,SAAS,CAAC,MAAM;IACd;IACA,MAAMyB,UAAU,GAAGT,MAAM,CAACC,UAAU,CAAC,8BAA8B,CAAC;IACpE,MAAMS,YAAY,GAAIC,CAAC,IAAK;MAC1B;MACA,MAAMd,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAChD,IAAI,CAACF,UAAU,EAAE;QACfD,aAAa,CAACe,CAAC,CAACT,OAAO,CAAC;MAC1B;IACF,CAAC;IAEDO,UAAU,CAACG,gBAAgB,CAAC,QAAQ,EAAEF,YAAY,CAAC;IACnD,OAAO,MAAMD,UAAU,CAACI,mBAAmB,CAAC,QAAQ,EAAEH,YAAY,CAAC;EACrE,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMI,WAAW,GAAGA,CAAA,KAAM;IACxBlB,aAAa,CAACmB,QAAQ,IAAI,CAACA,QAAQ,CAAC;EACtC,CAAC;EAED,MAAMC,KAAK,GAAG;IACZrB,UAAU;IACVmB,WAAW;IACXG,KAAK,EAAEtB,UAAU,GAAG,MAAM,GAAG;EAC/B,CAAC;EAED,oBACET,OAAA,CAACC,YAAY,CAAC+B,QAAQ;IAACF,KAAK,EAAEA,KAAM;IAAAvB,QAAA,EACjCA;EAAQ;IAAA0B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACY,CAAC;AAE5B,CAAC;AAAC5B,GAAA,CAvDWF,aAAa;AAAA+B,EAAA,GAAb/B,aAAa;AAyD1B,eAAeL,YAAY;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}